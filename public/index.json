[
{
	"uri": "//localhost:1313/",
	"title": "Internship Report",
	"tags": [],
	"description": "",
	"content": "INTERNSHIP REPORT Student Information: Full Name: [Your Full Name]\nPhone Number: [Your Phone Number]\nEmail: [Your Email]\nUniversity: [Your University]\nMajor: Information Technology\nClass: AWS082025\nInternship Company: Amazon Web Services Vietnam Co., Ltd.\nInternship Position: FCJ Cloud Intern\nInternship Duration: From 12/08/2025 to 12/11/2025\nReport Content Worklog Proposal Translated Blogs Events Participated Workshop Self-Assessment Sharing and Feedback "
},
{
	"uri": "//localhost:1313/1-worklog/",
	"title": "Worklog",
	"tags": [],
	"description": "",
	"content": "This section contains my daily work activities during the internship period from 12/08/2025 to 12/11/2025. Each entry includes:\nDate Tasks completed Skills learned Challenges faced Solutions implemented Notes and observations Daily Entries [Click here to view the detailed worklog entries]\nNote: Please update this section regularly with your daily activities and learning experiences.\n"
},
{
	"uri": "//localhost:1313/2-proposal/",
	"title": "Proposal",
	"tags": [],
	"description": "",
	"content": "IoT Security Monitoring \u0026amp; Alert System Project 1. Project Overview Project Title IoT Security Monitoring \u0026amp; Alert System on AWS Cloud Platform\nProject Description Development of a comprehensive IoT-based security monitoring and alerting system that combines hardware sensor integration, advanced security protocols, serverless backend architecture, and real-time dashboard visualization. The system provides end-to-end monitoring capabilities for environmental parameters (temperature, humidity, gas detection, motion) with robust security measures and cloud-based analytics.\nTeam Information Team Size: 5 members (3rd-year university students) Team Composition: 2 IC Design Engineers (Hardware/Firmware specialists) 2 Software Engineers (Backend/Frontend specialists) 1 Security Specialist (Cybersecurity \u0026amp; PKI expert) Project Duration 3 months (September 2025 - November 2025)\nTotal Budget $600 USD allocated across three main components:\nWebApp Development: $200 IoT Hardware \u0026amp; Firmware: $200 Security Infrastructure: $200 2. Project Objectives Primary Goals Develop secure IoT device ecosystem with hardware-level security using HSM/PKI Implement real-time monitoring system for environmental and security parameters Create scalable serverless backend using AWS managed services Build intuitive dashboard interface for monitoring and device management Establish comprehensive security framework with threat detection and incident response Key Success Metrics Device Connectivity: 99.9% uptime for IoT device connections Security Compliance: Zero security breaches during testing phase Real-time Performance: \u0026lt;100ms latency for critical alerts User Experience: Responsive dashboard accessible on web and mobile Cost Efficiency: Stay within $600 budget while achieving production-ready prototype 3. Technical Architecture 3.1 Hardware Layer (IoT Devices) Microcontroller: ESP32 with integrated WiFi capability Sensors: Temperature/humidity (DHT11), Gas detection (MQ series), MKE-S04 IR fire sensor Communication: MQTT over TLS 1.3 for secure data transmission 3.2 AWS Cloud Services Integration Service Purpose Estimated Monthly Cost AWS IoT Core Device gateway and messaging $8-12 AWS IoT Device Management Fleet management and OTA updates $3-5 AWS IoT Device Defender Security monitoring and anomaly detection $5-8 AWS IAM Identity and access management Free AWS Certificate Manager SSL/TLS certificate management Free AWS CloudTrail Security audit logging $5-10 AWS Lambda Serverless business logic $8-15 API Gateway RESTful API endpoints $3-6 Amazon DynamoDB NoSQL database for sensor data $8-12 Amazon SNS Push notifications and alerts $2-4 3.3 Security Framework Public Key Infrastructure (PKI): X.509 certificate-based device authentication Mutual TLS (mTLS): Bidirectional authentication between devices and cloud Hardware Security Module (HSM): Secure key storage and cryptographic operations Zero Trust Architecture: Continuous verification of device identity and behavior Automated Threat Response: Real-time incident detection and mitigation 4. Budget Breakdown 4.1 WebApp Development ($200) Frontend Framework: React.js/Vue.js development tools - $50 UI/UX Design Tools: Figma Pro subscription (3 months) - $45 Testing \u0026amp; Deployment: AWS S3/CloudFront hosting - $25 Development Libraries: Chart.js, Material-UI, WebSocket libraries - $30 Performance Monitoring: Application performance tools - $25 Documentation \u0026amp; Training: Technical writing resources - $25 4.2 IoT Hardware \u0026amp; Firmware ($200) Development Boards: 5x ESP32 development kits - $75 Sensors \u0026amp; Components: Temperature, humidity, gas, motion sensors - $60 PCB Prototyping: Custom sensor board fabrication (5 units) - $40 Hardware Security Module: SoftHSM alternative or TPM module - $15 Development Tools: Firmware debugging tools and licenses - $10 4.3 Security Infrastructure ($200) AWS Services: IoT Device Defender, CloudTrail, Certificate Manager - $120 Security Testing Tools: Penetration testing software licenses - $30 Certificate Authority Setup: PKI infrastructure costs - $20 Security Monitoring: Additional CloudWatch and logging costs - $20 Compliance Documentation: Security audit and documentation tools - $10 5. Implementation Timeline Phase 1: Foundation (Month 1) Week 1-2: Architecture \u0026amp; Planning\nSystem architecture design and documentation AWS account setup and service configuration Development environment preparation Team training on AWS services and security protocols Week 3-4: Core Development\nHardware schematic design and component sourcing Basic firmware development for sensor integration PKI infrastructure setup and certificate authority creation Backend API design and initial Lambda functions Phase 2: Integration (Month 2) Week 5-6: Hardware-Software Integration\nPCB fabrication and component assembly Device-to-cloud communication implementation Security certificate deployment to devices Real-time data pipeline development Week 7-8: Security Implementation\nMutual TLS authentication system IoT Device Defender configuration Security monitoring and alerting setup Frontend dashboard development Phase 3: Testing \u0026amp; Deployment (Month 3) Week 9-10: System Integration Testing\nEnd-to-end system testing and validation Security penetration testing and vulnerability assessment Performance optimization and load testing User acceptance testing and feedback incorporation Week 11-12: Production Preparation\nDocumentation completion and technical manual creation Production deployment and monitoring setup Final security audit and compliance verification Project presentation and demonstration preparation 6. Deliverables 6.1 Hardware Deliverables IoT Sensor Boards: 5 fully functional prototypes with integrated sensors Firmware Package: Complete embedded software with OTA update capability Hardware Documentation: Schematics, PCB layouts, and assembly instructions Manufacturing Guide: Production-ready documentation for scale-up 6.2 Software Deliverables Backend API: RESTful services with comprehensive documentation Frontend Dashboard: Responsive web application with real-time monitoring Mobile Interface: Progressive Web App (PWA) for mobile device access Database Schema: Optimized data models for time-series sensor data 6.3 Security Deliverables PKI Infrastructure: Complete certificate authority and device certificate system Security Policies: IAM roles, device policies, and access control configurations Monitoring System: Automated threat detection and incident response Security Documentation: Compliance checklist and security operation manual 6.4 Documentation \u0026amp; Training Technical Documentation: System architecture, API documentation, deployment guides User Manual: End-user guide for dashboard operation and device management Security Manual: Security policies, incident response procedures, and compliance guide Training Materials: Video tutorials and hands-on training sessions 7. Risk Assessment \u0026amp; Mitigation 7.1 Technical Risks Risk Impact Probability Mitigation Strategy Hardware component delays High Medium Order components early, maintain backup suppliers AWS service cost overrun Medium Low Implement cost monitoring, use free tier effectively Security vulnerability discovery High Low Regular security testing, follow AWS best practices Integration complexity Medium Medium Incremental integration, comprehensive testing 7.2 Project Management Risks Risk Impact Probability Mitigation Strategy Team member unavailability Medium Low Cross-training, documentation, backup assignments Timeline delays Medium Medium Buffer time allocation, milestone tracking Scope creep Low Medium Clear requirements documentation, change control Budget constraints High Low Weekly budget tracking, cost optimization 8. Expected Outcomes \u0026amp; Impact 8.1 Technical Achievements Functional IoT System: Production-ready prototype demonstrating all key features Security Excellence: Zero-vulnerability system with industry-standard security practices Scalable Architecture: Cloud-native design capable of handling 1000+ devices Real-time Performance: Sub-second response times for critical alerts and notifications 8.2 Learning Outcomes Cloud Architecture: Hands-on experience with AWS services and serverless computing IoT Security: Deep understanding of hardware-level security and PKI implementation Full-Stack Development: Complete software development lifecycle experience Project Management: Practical experience in agile development and team collaboration 8.3 Future Applications Smart Building Management: Environmental monitoring for commercial buildings Industrial IoT: Equipment monitoring and predictive maintenance systems Healthcare Monitoring: Patient environment and medical device tracking Environmental Monitoring: Air quality and climate monitoring networks 9. Conclusion This IoT Security Monitoring \u0026amp; Alert System project represents a comprehensive approach to modern IoT development, combining cutting-edge hardware design, robust security protocols, and scalable cloud architecture. With a budget of $600 and a timeline of 3 months, our team of 5 dedicated students will deliver a production-ready prototype that demonstrates best practices in IoT security, cloud computing, and full-stack development.\nThe project not only serves as an excellent learning experience but also creates a foundation for real-world applications in smart cities, industrial monitoring, and environmental protection. By leveraging AWS managed services and focusing on security-first design principles, we aim to create a system that meets both current needs and future scalability requirements.\nProject Contact Information:\nProject Manager: Tran Quang Huy Security Lead: Tran Quang Huy Email: huytqse182122@fpt.edu.vn Project Repository: [GitHub repository URL] This proposal is submitted for consideration and approval. We look forward to the opportunity to demonstrate our technical capabilities and deliver exceptional results within the proposed timeline and budget.\n"
},
{
	"uri": "//localhost:1313/3-translated-blogs/",
	"title": "Translated Blogs",
	"tags": [],
	"description": "",
	"content": "This section contains AWS technical blogs that I have translated from English to Vietnamese.\nBlog List 1. [Blog Title 1] Original URL: [Link] Translation Date: [Date] Topics: AWS Service 1 AWS Service 2 Key Terms Translated: Term 1: Translation Term 2: Translation 2. [Blog Title 2] Original URL: [Link] Translation Date: [Date] Topics: AWS Service 3 AWS Service 4 Key Terms Translated: Term 3: Translation Term 4: Translation Translation Process Read and understand the original content thoroughly Research technical terms and AWS-specific terminology Translate while maintaining technical accuracy Review and verify technical context Peer review when possible Final proofreading and formatting "
},
{
	"uri": "//localhost:1313/4--event-participated/",
	"title": "Events Participated",
	"tags": [],
	"description": "",
	"content": "This section documents the AWS and cloud computing events I participated in during my internship period.\nEvent List 1. AWS Community Day Vietnam 2025 Date: [Event Date] Location: Ho Chi Minh City Type: Conference Topics Covered: AWS Services Overview Cloud Architecture Best Practices Serverless Computing Key Learnings: Latest AWS service features Real-world case studies Networking with AWS community 2. AWS User Group Meetup Date: [Event Date] Location: Virtual Type: Webinar Topics Covered: AWS Cost Optimization DevOps Practices Security Best Practices Key Learnings: Cost management strategies CI/CD pipeline implementation Security compliance standards Value Added Enhanced understanding of AWS services Built professional network in cloud computing Gained practical insights from industry experts Improved technical presentation skills "
},
{
	"uri": "//localhost:1313/5-workshop/",
	"title": "Workshop",
	"tags": [],
	"description": "",
	"content": "This section documents the workshops I have created and delivered during my internship.\nWorkshop: AWS Systems Manager Session Manager Overview A comprehensive workshop on using AWS Systems Manager Session Manager for secure instance management without the need for bastion hosts or SSH keys.\nTarget Audience AWS Cloud Engineers System Administrators DevOps Engineers Prerequisites Basic understanding of AWS services AWS account with appropriate permissions Familiarity with EC2 instances Topics Covered Session Manager Overview Setting up Session Manager Managing EC2 Instances Logging and Monitoring Security Best Practices Hands-on Labs Creating and Configuring EC2 Instances Setting up IAM Roles and Permissions Implementing Session Logging Working with Private Instances Troubleshooting Common Issues Resources Provided Step-by-step guides Architecture diagrams IAM policy templates Sample configurations Troubleshooting guides Workshop Impact Trained 20+ participants Improved understanding of secure instance management Reduced reliance on bastion hosts Enhanced security practices "
},
{
	"uri": "//localhost:1313/6-self-assessment/",
	"title": "Self-Assessment",
	"tags": [],
	"description": "",
	"content": "This section contains my evaluation of skills developed and areas for improvement during the internship.\nTechnical Skills Development AWS Services Mastered EC2 and VPC Configuration Systems Manager and Session Manager IAM Roles and Policies S3 and Storage Solutions CloudWatch Logging Programming and Tools AWS CLI Proficiency Shell Scripting Infrastructure as Code (IaC) Git Version Control Technical Documentation Professional Growth Strengths Developed Project Management Technical Documentation Problem-solving Team Collaboration Time Management Areas for Improvement Advanced AWS Architectures Cost Optimization Strategies Performance Testing Automation Scripts Public Speaking Key Achievements Created comprehensive workshop materials Implemented secure instance management solutions Contributed to team documentation Participated in community events Learning Outcomes Deep understanding of AWS services Best practices in cloud security Technical writing skills Effective problem-solving strategies Goals for Future Development AWS Professional Certification Advanced Architecture Design Contributing to Open Source Leadership Skills Development Create IAM user with permission to connect SSM Go to IAM service management console Click Users , then click Add users. At the Add user page. In the User name field, enter Portfwd. Click on Access key - Programmatic access. Click Next: Permissions. Click Attach existing policies directly.\nIn the search box, enter ssm. Click on AmazonSSMFullAccess. Click Next: Tags, click Next: Reviews. Click Create user. Save Access key ID and Secret access key information to perform AWS CLI configuration.\nInstall and Configure AWS CLI and Session Manager Plugin To perform this hands-on, make sure your workstation has AWS CLI and Session Manager Plugin installed -manager-working-with-install-plugin.html)\nMore hands-on tutorials on installing and configuring the AWS CLI can be found here.\nWith Windows, when extracting the Session Manager Plugin installation folder, run the install.bat file with Administrator permission to perform the installation.\nImplement Portforwarding Run the command below in Command Prompt on your machine to configure Port Forwarding. aws ssm start-session --target (your ID windows instance) --document-name AWS-StartPortForwardingSession --parameters portNumber=\u0026#34;3389\u0026#34;,localPortNumber=\u0026#34;9999\u0026#34; --region (your region) Windows Private Instance Instance ID information can be found when you view the EC2 Windows Private Instance server details.\nExample command: C:\\Windows\\system32\u0026gt;aws ssm start-session --target i-06343d7377486760c --document-name AWS-StartPortForwardingSession --parameters portNumber=\u0026#34;3389\u0026#34;,localPortNumber=\u0026#34;9999\u0026#34; --region ap-southeast-1 If your command gives an error like below: SessionManagerPlugin is not found. Please refer to SessionManager Documentation here: http://docs.aws.amazon.com/console/systems-manager/session-manager-plugin-not-found\nProve that you have not successfully installed the Session Manager Plugin. You may need to relaunch Command Prompt after installing Session Manager Plugin.\nConnect to the Private Windows Instance you created using the Remote Desktop tool on your workstation. In the Computer section: enter localhost:9999. Return to the administration interface of the System Manager - Session Manager service. Click tab Session history. We will see session logs with Document name AWS-StartPortForwardingSession. Congratulations on completing the lab on how to use Session Manager to connect and store session logs in S3 bucket. Remember to perform resource cleanup to avoid unintended costs.\n"
},
{
	"uri": "//localhost:1313/7-sharing-and-feedback/",
	"title": "Sharing and Feedback",
	"tags": [],
	"description": "",
	"content": "This section documents the knowledge sharing activities and feedback received during my internship.\nKnowledge Sharing Technical Blog Posts \u0026ldquo;Implementing Secure Instance Access with AWS Systems Manager\u0026rdquo;\nPublished on AWS Blog Topics: Security, Instance Management Reader Engagement: [Statistics] \u0026ldquo;Best Practices for AWS Session Manager\u0026rdquo;\nPublished on Medium Topics: AWS, Security Best Practices Impact: [Metrics] Technical Presentations \u0026ldquo;Introduction to AWS Systems Manager\u0026rdquo;\nAudience: New AWS Users Duration: 45 minutes Key Topics: Basic concepts, hands-on demo \u0026ldquo;Advanced Session Manager Features\u0026rdquo;\nAudience: Experienced AWS Users Duration: 60 minutes Key Topics: Security, logging, automation Feedback Received From Mentor Strong technical understanding Good documentation skills Areas for improvement: Advanced architectural concepts Public speaking confidence From Team Members Effective collaboration Clear communication Helpful in knowledge sharing Suggestions for improvement: More proactive in meetings Enhanced project planning Personal Reflections Gained valuable hands-on experience Improved technical documentation skills Enhanced understanding of AWS services Developed professional network Impact and Contributions Created reusable workshop materials Helped streamline instance management processes Contributed to team documentation Supported new team members Delete EC2 instance Go to EC2 service management console\nClick Instances. Select both Public Linux Instance and Private Windows Instance instances. Click Instance state. Click Terminate instance, then click Terminate to confirm. Go to IAM service management console\nClick Roles. In the search box, enter SSM. Click to select SSM-Role. Click Delete, then enter the role name SSM-Role and click Delete to delete the role. Click Users. Click on user Portfwd. Click Delete, then enter the user name Portfwd and click Delete to delete the user. Delete S3 bucket Access System Manager - Session Manager service management console.\nClick the Preferences tab. Click Edit. Scroll down. In the section S3 logging. Uncheck Enable to disable logging. Scroll down. Click Save. Go to S3 service management console\nClick on the S3 bucket we created for this lab. (Example: lab-fcj-bucket-0001 ) Click Empty. Enter permanently delete, then click Empty to proceed to delete the object in the bucket. Click Exit. After deleting all objects in the bucket, click Delete\nEnter the name of the S3 bucket, then click Delete bucket to proceed with deleting the S3 bucket. Delete VPC Endpoints Go to VPC service management console Click Endpoints. Select the 4 endpoints we created for the lab including SSM, SSMMESSAGES, EC2MESSAGES, S3GW. Click Actions. Click Delete VPC endpoints. In the confirm box, enter delete.\nClick Delete to proceed with deleting endpoints. Click the refresh icon, check that all endpoints have been deleted before proceeding to the next step.\nDelete VPC Go to VPC service management console\nClick Your VPCs. Click on Lab VPC. Click Actions. Click Delete VPC. In the confirm box, enter delete to confirm, click Delete to delete Lab VPC and related resources.\n"
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]